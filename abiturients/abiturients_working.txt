-- database: d:\py_learning\learning_SQL\abiturients\abiturients_base.db
-- Use the ▷ button in the top right corner to run the entire file.
/*Вывести абитуриентов, которые хотят поступать на образовательную программу «Мехатроника и робототехника» в отсортированном по фамилиям виде.*/
SELECT
    name_enrollee
FROM
    program_enrollee AS pe
    INNER JOIN enrollee USING (enrollee_id)
    INNER JOIN program AS p ON pe.program_id = p.program_id
    AND name_program = 'Мехатроника и робототехника'
ORDER BY
    name_enrollee;

/*Вывести образовательные программы, на которые для поступления необходим предмет «Информатика». Программы отсортировать в обратном алфавитном порядке.*/
SELECT
    name_program
FROM
    program_subject
    INNER JOIN subject USING (subject_id)
    INNER JOIN program USING (program_id)
WHERE
    name_subject = 'Информатика'
ORDER BY
    name_program DESC;

/*Выведите количество абитуриентов, сдавших ЕГЭ по каждому предмету, максимальное, минимальное и среднее значение баллов по предмету ЕГЭ. Вычисляемые столбцы назвать Количество, Максимум, Минимум, Среднее. Информацию отсортировать по названию предмета в алфавитном порядке, среднее значение округлить до одного знака после запятой.*/
SELECT
    name_subject,
    COUNT(enrollee_id) AS Количество,
    MAX(result) AS Максимум,
    MIN(result) AS Минимум,
    ROUND(AVG(result), 1) AS Среднее
FROM
    enrollee_subject
    INNER JOIN subject USING (subject_id)
GROUP BY
    subject_id
ORDER BY
    name_subject ASC;

/*Вывести образовательные программы, для которых минимальный балл ЕГЭ по каждому предмету больше или равен 40 баллам. Программы вывести в отсортированном по алфавиту виде.*/
SELECT
    name_program
FROM
    program_subject
    INNER JOIN program USING (program_id)
GROUP BY
    program_subject.program_id
HAVING
    MIN(min_result) >= 40
ORDER BY
    name_program;

/*Вывести образовательные программы, которые имеют самый большой план набора,  вместе с этой величиной.*/
SELECT
    name_program,
    plan
FROM
    program
WHERE
    plan = (
        SELECT
            MAX(plan)
        FROM
            program
    );

/*Посчитать, сколько дополнительных баллов получит каждый абитуриент. Столбец с дополнительными баллами назвать Бонус. Информацию вывести в отсортированном по фамилиям виде.*/
SELECT
    name_enrollee,
    IF (SUM(bonus), SUM(bonus), 0) AS Бонус
FROM
    enrollee
    LEFT JOIN enrollee_achievement USING (enrollee_id)
    LEFT JOIN achievement USING (achievement_id)
GROUP BY
    name_enrollee
ORDER BY
    name_enrollee;

/*Выведите сколько человек подало заявление на каждую образовательную программу и конкурс на нее (число поданных заявлений деленное на количество мест по плану), округленный до 2-х знаков после запятой. В запросе вывести название факультета, к которому относится образовательная программа, название образовательной программы, план набора абитуриентов на образовательную программу (plan), количество поданных заявлений (Количество) и Конкурс. Информацию отсортировать в порядке убывания конкурса.*/
SELECT
    name_department,
    name_program,
    plan,
    COUNT(enrollee_id) AS Количество,
    ROUND((COUNT(enrollee_id) / plan), 2) AS Конкурс
FROM
    program
    INNER JOIN program_enrollee USING (program_id)
    INNER JOIN department USING (department_id)
GROUP BY
    name_program,
    department_id,
    plan
ORDER BY
    Конкурс DESC;

/*Вывести образовательные программы, на которые для поступления необходимы предмет «Информатика» и «Математика» в отсортированном по названию программ виде.*/
SELECT
    name_program
FROM
    program_subject
    INNER JOIN program USING (program_id)
    INNER JOIN subject USING (subject_id)
    INNER JOIN (
        SELECT
            subject.name_subject,
            program.name_program
        FROM
            program_subject
            INNER JOIN program USING (program_id)
            INNER JOIN subject USING (subject_id)
        WHERE
            subject.name_subject = 'Информатика'
    ) temp USING (name_program)
WHERE
    subject.name_subject = 'Математика'
ORDER BY
    name_program;

/*Посчитать количество баллов каждого абитуриента на каждую образовательную программу, на которую он подал заявление, по результатам ЕГЭ. В результат включить название образовательной программы, фамилию и имя абитуриента, а также столбец с суммой баллов, который назвать itog. Информацию вывести в отсортированном сначала по образовательной программе, а потом по убыванию суммы баллов виде.*/
SELECT
    name_program,
    name_enrollee,
    SUM(result) AS itog
FROM
    program_enrollee AS pe
    INNER JOIN program_subject AS ps USING (program_id)
    INNER JOIN enrollee_subject AS es ON pe.enrollee_id = es.enrollee_id
    AND ps.subject_id = es.subject_id
    INNER JOIN program ON pe.program_id = program.program_id
    INNER JOIN enrollee ON pe.enrollee_id = enrollee.enrollee_id
GROUP BY
    pe.program_id,
    pe.enrollee_id
ORDER BY
    name_program,
    itog DESC;

/*Вывести название образовательной программы и фамилию тех абитуриентов, которые подавали документы на эту образовательную программу, но не могут быть зачислены на нее. Эти абитуриенты имеют результат по одному или нескольким предметам ЕГЭ, необходимым для поступления на эту образовательную программу, меньше минимального балла. Информацию вывести в отсортированном сначала по программам, а потом по фамилиям абитуриентов виде.*/
SELECT
    name_program,
    name_enrollee
FROM
    program_enrollee AS pe
    INNER JOIN enrollee_subject AS es USING (enrollee_id)
    INNER JOIN program_subject AS ps ON pe.program_id = ps.program_id
    AND es.subject_id = ps.subject_id
    INNER JOIN program ON program.program_id = pe.program_id
    INNER JOIN enrollee ON enrollee.enrollee_id = pe.enrollee_id
WHERE
    result < min_result
GROUP BY
    pe.program_id,
    pe.enrollee_id
ORDER BY
    name_program,
    name_enrollee;

/* Создать вспомогательную таблицу applicant,  куда включить id образовательной программы,  id абитуриента, сумму баллов абитуриентов (столбец itog) в отсортированном сначала по id образовательной программы, а потом по убыванию суммы баллов виде (использовать запрос из предыдущего урока).*/
CREATE TABLE
    applicant (program_id INT, enrollee_id INT, itog INT);

INSERT INTO
    applicant
SELECT
    pe.program_id,
    pe.enrollee_id,
    SUM(result) AS itog
FROM
    program_enrollee AS pe
    INNER JOIN program_subject AS ps USING (program_id)
    INNER JOIN enrollee_subject AS es ON pe.enrollee_id = es.enrollee_id
    AND ps.subject_id = es.subject_id
    INNER JOIN program ON pe.program_id = program.program_id
    INNER JOIN enrollee ON pe.enrollee_id = enrollee.enrollee_id
GROUP BY
    pe.program_id,
    pe.enrollee_id
ORDER BY
    pe.program_id,
    itog DESC;

/*Из таблицы applicant,  созданной на предыдущем шаге, удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету (использовать запрос из предыдущего урока).*/
DELETE FROM applicant 
USING applicant
    INNER JOIN (
        SELECT
            pe.program_id,
            pe.enrollee_id
        FROM
            program_enrollee AS pe
            INNER JOIN enrollee_subject AS es USING (enrollee_id)
            INNER JOIN program_subject AS ps ON pe.program_id = ps.program_id
            AND es.subject_id = ps.subject_id
        WHERE
            result < min_result
        GROUP BY
            pe.program_id,
            pe.enrollee_id
    ) temp ON applicant.program_id = temp.program_id
    AND applicant.enrollee_id = temp.enrollee_id;

/*Повысить итоговые баллы абитуриентов в таблице applicant на значения дополнительных баллов (использовать запрос из предыдущего урока).*/
UPDATE applicant, (SELECT 
                       enrollee_id, 
                       SUM(bonus) AS bonus
                   FROM 
                       enrollee_achievement
                       INNER JOIN achievement USING(achievement_id)
                   GROUP BY enrollee_id) AS ea
SET applicant.itog = applicant.itog + ea.bonus
WHERE applicant.enrollee_id = ea.enrollee_id;    

/*создать новую таблицу applicant_order на основе таблицы applicant. При создании таблицы данные нужно отсортировать сначала по id образовательной программы, потом по убыванию итогового балла. А таблицу applicant, которая была создана как вспомогательная, необходимо удалить.*/
CREATE TABLE applicant_order (
                    program_id INTEGER,
                    enrollee_id INTEGER,
                    itog INTEGER);
INSERT INTO applicant_order
SELECT
    program_id,
    enrollee_id,
    itog
FROM
    applicant
ORDER BY
    program_id,
    itog DESC;

DROP TABLE applicant;

/*Занести в столбец str_id таблицы applicant_order нумерацию абитуриентов, которая начинается с 1 для каждой образовательной программы.*/
SET @n_ell := 0;
SET @n_pr := 1;

UPDATE applicant_order
SET str_id = IF(@n_pr = program_id, @n_ell := @n_ell + 1, @n_ell := 1 AND @n_pr := @n_pr +1);

/*Создать таблицу student,  в которую включить абитуриентов, которые могут быть рекомендованы к зачислению  в соответствии с планом набора. Информацию отсортировать сначала в алфавитном порядке по названию программ, а потом по убыванию итогового балла.*/
CREATE TABLE student AS (SELECT 
                            name_program, 
                            name_enrollee, 
                            itog
                        FROM 
                            program AS p
                            JOIN applicant_order AS ap ON  p.program_id = ap.program_id 
                            AND str_id <= plan
                            JOIN enrollee USING (enrollee_id)
                        ORDER BY 
                            name_program, 
                            itog DESC);

                            