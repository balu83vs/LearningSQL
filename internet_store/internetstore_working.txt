-- database: d:\py_learning\learning_SQL\internet_store\internet_store.db
SELECT
    *
FROM
    book;

SELECT
    *
FROM
    client;

SELECT
    *
FROM
    city;

SELECT
    *
FROM
    author;

SELECT
    *
FROM
    genre;

SELECT
    *
FROM
    step;

SELECT
    *
FROM
    buy_step;

SELECT
    *
FROM
    buy;

SELECT
    *
FROM
    buy_book;

/*Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.*/
SELECT
    buy.buy_id,
    book.title,
    book.price,
    buy.amount
FROM
    book
    INNER JOIN (
        SELECT
            buy.buy_id,
            book_id,
            amount
        FROM
            buy_book
            INNER JOIN (
                SELECT
                    buy_id
                FROM
                    buy
                    INNER JOIN client ON buy.client_id = client.client_id
                WHERE
                    name_client = 'Баранов Павел'
            ) buy ON buy.buy_id = buy_book.buy_id
    ) buy ON book.book_id = buy.book_id
ORDER BY
    buy.buy_id,
    book.title;

/*Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга).  Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг.*/
SELECT
    name_author,
    title,
    Количество
FROM
    (
        SELECT
            author_id,
            title,
            COUNT(buy_book_id) AS Количество
        FROM
            buy_book
            RIGHT JOIN book USING (book_id)
        GROUP BY
            title
    ) res
    INNER JOIN author USING (author_id)
ORDER BY
    name_author,
    title;

/*Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. Указать количество заказов в каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, а затем в алфавитном порядке по названию городов.*/
SELECT
    name_city,
    COUNT(buy_id) AS Количество
FROM
    buy
    INNER JOIN client USING (client_id)
    INNER JOIN city USING (city_id)
GROUP BY
    city_id
ORDER BY
    Количество DESC,
    name_city ASC;

/*Вывести номера всех оплаченных заказов и даты, когда они были оплачены.*/
SELECT
    buy_id,
    date_step_end
FROM
    buy_step
WHERE
    step_id = 1
    AND date_step_end IS NOT Null;

/*Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец назвать Стоимость.*/
SELECT
    buy_id,
    name_client,
    SUM(buy_book.amount * price) AS Стоимость
FROM
    buy
    INNER JOIN client USING (client_id)
    INNER JOIN buy_book USING (buy_id)
    INNER JOIN book USING (book_id)
GROUP BY
    buy_id
ORDER BY
    buy_id;

/*Вывести номера заказов (buy_id) и названия этапов, на которых они в данный момент находятся. Если заказ доставлен –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.*/
SELECT
    buy_id,
    NAME_STEP
FROM
    buy_step INER
    JOIN step USING (step_id)
WHERE
    date_step_beg IS NOT Null
    AND date_step_end IS Null
ORDER BY
    buy_id;

SELECT
    buy_id,
    (date_step_end - date_step_beg) AS Количество_дней,
    IF (
        (Количество_дней - days_delivery) <= 0,
        0,
        (Количество_дней - days_delivery)
    ) AS Опоздание
FROM
    buy_step
    INNER JOIN buy USING (buy_id)
    INNER JOIN client USING (client_id)
    INNER JOIN city USING (city_id)
WHERE
    step_id = 3
    AND date_step_beg IS NOT Null
    AND date_step_end IS NOT Null
ORDER BY
    buy_id;

/*Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде. В решении используйте фамилию автора, а не его id.*/
SELECT DISTINCT
    name_client
FROM
    buy_book
    INNER JOIN book USING (book_id)
    INNER JOIN author USING (author_id)
    INNER JOIN buy USING (buy_id)
    INNER JOIN client USING (client_id)
WHERE
    name_author LIKE 'Достоевский%'
ORDER BY
    name_client ASC;

/*Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество . Последний столбец назвать Количество.*/
SELECT
    name_genre,
    SUM(buy_book.amount) AS Количество
FROM
    buy_book
    INNER JOIN book USING (book_id)
    INNER JOIN genre USING (genre_id)
GROUP BY
    name_genre
HAVING
    Количество = (
        SELECT
            SUM(buy_book.amount) AS s_amount
        FROM
            buy_book
            INNER JOIN book USING (book_id)
        GROUP BY
            genre_id
        ORDER BY
            s_amount DESC
        LIMIT
            1
    );

/*Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.*/
SELECT
    Год,
    Месяц,
    SUM(Стоимость) AS Сумма
FROM
    (
        SELECT
            YEAR (DATE(date_step_end)) AS Год,
            MONTHNAME (DATE(date_step_end)) AS Месяц,
            (price * buy_book.amount) AS Стоимость
        FROM
            buy_step
            INNER JOIN buy_book USING (buy_id)
            INNER JOIN book USING (book_id)
        WHERE
            step_id = 1
            AND date_step_end IS NOT Null
    ) temp
GROUP BY
    Год,
    Месяц
UNION
SELECT
    YEAR (DATE(date_payment)) AS Год,
    MONTHNAME (DATE(date_payment)) AS Месяц,
    SUM(price * amount) AS Сумма
FROM
    buy_archive
GROUP BY
    Год,
    Месяц
ORDER BY
    Месяц,
    Год;

/*Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за 2020 и 2019 год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.*/
SELECT
    title,
    SUM(Количество) AS Количество,
    SUM(Сумма) AS Сумма
FROM
    (
        SELECT
            title,
            buy_book.amount AS Количество,
            (buy_book.amount * book.price) AS Сумма
        FROM
            buy_book
            INNER JOIN book USING (book_id)
            INNER JOIN buy_step USING (buy_id)
        WHERE
            buy_step.step_id = 1
            AND buy_step.date_step_end IS NOT Null
        UNION ALL
        SELECT
            title,
            buy_archive.amount AS Количество,
            (buy_archive.amount * buy_archive.price) AS Сумма
        FROM
            buy_archive
            INNER JOIN book USING (book_id)
    ) temp
GROUP BY
    title
ORDER BY
    Сумма DESC;

/*Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test, проживает он в Москве.*/
INSERT INTO
    client (name_client, city_id, email)
SELECT
    'Попов Илья',
    city_id,
    'popov@test'
FROM
    city
WHERE
    name_city = 'Москва';

/*Создать новый заказ для Попова Ильи. Его комментарий для заказа: «Связаться со мной по вопросу доставки».*/
INSERT INTO
    buy (buy_description, client_id)
SELECT
    'Связаться со мной по вопросу доставки',
    client_id
FROM
    client
WHERE
    name_client = 'Попов Илья';

/*В таблицу buy_book добавить заказ с номером 5. Этот заказ должен содержать книгу Пастернака «Лирика» в количестве двух экземпляров и книгу Булгакова «Белая гвардия» в одном экземпляре.*/
INSERT INTO
    buy_book (buy_id, book_id, amount)
SELECT
    5,
    book_id,
    2
FROM
    book
WHERE
    title = 'Лирика';

INSERT INTO
    buy_book (buy_id, book_id, amount)
SELECT
    5,
    book_id,
    1
FROM
    book
WHERE
    title = 'Белая гвардия';

/*Количество тех книг на складе, которые были включены в заказ с номером 5, уменьшить на то количество, которое в заказе с номером 5  указано.*/
UPDATE book
INNER JOIN buy_book USING (book_id)
SET
    book.amount = book.amount - buy_book.amount
WHERE
    buy_book.buy_id = 5;

/*Создать счет (таблицу buy_pay) на оплату заказа с номером 5, в который включить название книг, их автора, цену, количество заказанных книг и  стоимость. Последний столбец назвать Стоимость. Информацию в таблицу занести в отсортированном по названиям книг виде.*/
INSERT INTO
    buy_pay
SELECT
    title,
    name_author,
    price,
    buy_book.amount,
    price * buy_book.amount AS Стоимость
FROM
    buy_book
    INNER JOIN book USING (book_id)
    INNER JOIN author USING (author_id)
WHERE
    buy_id = 5
ORDER BY
    title ASC;

/*Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5. Куда включить номер заказа, количество книг в заказе (название столбца Количество) и его общую стоимость (название столбца Итого). Для решения используйте ОДИН запрос.*/
INSERT INTO
    buy_pay
SELECT
    buy_id,
    SUM(buy_book.amount) AS Количество,
    SUM(price * buy_book.amount) AS Итого
FROM
    buy_book
    INNER JOIN book USING (book_id)
GROUP BY
    buy_id
HAVING
    buy_id = 5;

/*В таблицу buy_step для заказа с номером 5 включить все этапы из таблицы step, которые должен пройти этот заказ. В столбцы date_step_beg и date_step_end всех записей занести Null.*/
INSERT INTO
    buy_step (buy_id, step_id, date_step_beg, date_step_end)
SELECT
    5,
    step_id,
    null,
    null
FROM
    step;


/*В таблицу buy_step занести дату 12.04.2020 выставления счета на оплату заказа с номером 5.*/
UPDATE buy_step 
    INNER JOIN step USING (step_id)
SET date_step_beg = '2020-04-12'
WHERE name_step = 'Оплата' AND buy_id = 5;

UPDATE buy_step 
    INNER JOIN step ON buy_step.step_id = step.step_id 
                    AND step.name_step = 'Оплата' 
                    AND buy_step.buy_id = 5
SET date_step_beg = '2020-04-12';   


/*Завершить этап «Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020, и начать следующий этап («Упаковка»), задав в столбце date_step_beg для этого этапа ту же дату.*/
UPDATE buy_step 
    INNER JOIN step ON buy_step.step_id = step.step_id 
                    AND step.name_step = 'Оплата' 
                    AND buy_step.buy_id = 5
SET date_step_end = '2020-04-13';

UPDATE buy_step 
    INNER JOIN step ON buy_step.step_id = step.step_id 
                    AND step.name_step = 'Упаковка' 
                    AND buy_step.buy_id = 5
SET date_step_beg = '2020-04-13';
